// Address : https://leetcode.com/problems/roman-to-integer/#/description
// Author  : itachigorun
// Date    : 2017-03-19

/**************************************************************
*
*Given a roman numeral, convert it to an integer.
*Input is guaranteed to be within the range from 1 to 3999.
*
**************************************************************/

1.method c

int romanToInt(char *s)
{
    #define _M 1000
    #define _D 500
    #define _C 100
    #define _L 50
    #define _X 10
    #define _V 5
    #define _I 1

    int result = 0;
    int last = _M;
    
    for (int i = 0 ; i < strlen(s) ; i++)
    {
        switch(s[i])
        {
            case 'M':
                result = (last >= _M ? result + _M : result + _M - (last  << 1));
                last = _M;
            break;
            
            case 'D':
                result = (last >= _D ? result + _D : result + _D - (last << 1));
                last = _D;
            break;
            
            case 'C':
                result = (last >= _C ? result + _C : result + _C - (last << 1));
                last = _C;
            break;

            case 'L':
                result = (last >= _L ? result + _L : result + _L - (last << 1));
                last = _L;
            break;
            
            case 'X':
                result = (last >= _X ? result + _X : result + _X - (last << 1));
                last = _X;
            break;
            
            case 'V':
                result = (last >= _V ? result + _V : result + _V - (last << 1));
                last = _V;
            break;
            
            case 'I':
                result = (last >= _I ? result + _I : result + _I - (last << 1));
                last = _I;
            break;
        }
    }
    return result;
}

2. method C++

class Solution {
public:
    int romanToInt(string s) {
    unordered_map<char, int> T = { { 'I' , 1 },
                                   { 'V' , 5 },
                                   { 'X' , 10 },
                                   { 'L' , 50 },
                                   { 'C' , 100 },
                                   { 'D' , 500 },
                                   { 'M' , 1000 } };
                                   
   int sum = T[s.back()];
   for (int i = s.length() - 2; i >= 0; --i) 
   {
       if (T[s[i]] < T[s[i + 1]])
       {
           sum -= T[s[i]];
       }
       else
       {
           sum += T[s[i]];
       }
   }
   
   return sum;
    }
};

3. method Python

class Solution(object):
    def romanToInt(self, s):
        roman = {'M' : 1000, 'D' : 500, 'C' : 100, 'L' : 50, 'X' : 10, 'V' : 5, 'I' : 1}
        sum = 0
        for i in range(0, len(s) -1):
            if roman[s[i]] < roman[s[i + 1]]:
                sum -= roman[s[i]]
            else:
                sum += roman[s[i]]

        return sum + roman[s[-1]]

4. method Python

d = {'M':1000, 'D':500, 'C':100, 'L':50, 'X':10, 'V':5, 'I':1}

def romanToInt(self, s):
    res, p = 0, 'I'
    for c in s[::-1]:
        res, p = res - d[c] if d[c] < d[p] else res + d[c], c
    return res